steps:
- id: 'Branch detection'
  name: 'alpine'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      echo "***********************"
      echo "$BRANCH_NAME"
      echo "***********************"
- id: 'Terraform init'
  name: 'hashicorp/terraform:0.12.26'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      if [ -d "env/$BRANCH_NAME/" ]; then
        cd env/$BRANCH_NAME
        terraform init
      else
        for dir in env/*/
        do
          cd ${dir}
          env=${dir%*/}
          env=${env#*/}
          echo ""
          echo "*************** TERRAFORM INIT ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform init || exit 1
          cd ../../
        done
      fi
# [START tf-plan]
- id: 'Terraform plan'
  name: 'hashicorp/terraform:0.12.26'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      if [ -d "env/$BRANCH_NAME/" ]; then
        cd env/$BRANCH_NAME
        terraform plan -var-file="terrafrom.tfvars"
      else
        for dir in env/*/
        do
          cd ${dir}
          env=${dir%*/}
          env=${env#*/}
          echo ""
          echo "*************** TERRAFOM PLAN ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform plan -var-file="terrafrom.tfvars" || exit 1
          cd ../../
        done
      fi
# [END tf-plan]

# [START tf-apply]
- id: 'Terraform apply'
  name: 'hashicorp/terraform:0.12.26'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      if [ -d "env/$BRANCH_NAME/" ]; then
        cd env/$BRANCH_NAME
        terraform apply -var-file="terrafrom.tfvars" -auto-approve
      else
        echo "***************************** SKIPPING APPLYING *******************************"
        echo "Branch '$BRANCH_NAME' does not represent an oficial environment."
        echo "*******************************************************************************"
      fi
# [END tf-apply]
